==34368== Memcheck, a memory error detector
==34368== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==34368== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==34368== Command: ./buggy_code_3.out
==34368== 
==34368== Syscall param msg->desc.port.name points to uninitialised byte(s)
==34368==    at 0x10059934A: mach_msg_trap (in /usr/lib/system/libsystem_kernel.dylib)
==34368==    by 0x100598796: mach_msg (in /usr/lib/system/libsystem_kernel.dylib)
==34368==    by 0x100592485: task_set_special_port (in /usr/lib/system/libsystem_kernel.dylib)
==34368==    by 0x10072E10E: _os_trace_create_debug_control_port (in /usr/lib/system/libsystem_trace.dylib)
==34368==    by 0x10072E458: _libtrace_init (in /usr/lib/system/libsystem_trace.dylib)
==34368==    by 0x1002319DF: libSystem_initializer (in /usr/lib/libSystem.B.dylib)
==34368==    by 0x100019A1A: ImageLoaderMachO::doModInitFunctions(ImageLoader::LinkContext const&) (in /usr/lib/dyld)
==34368==    by 0x100019C1D: ImageLoaderMachO::doInitialization(ImageLoader::LinkContext const&) (in /usr/lib/dyld)
==34368==    by 0x1000154A9: ImageLoader::recursiveInitialization(ImageLoader::LinkContext const&, unsigned int, char const*, ImageLoader::InitializerTimingList&, ImageLoader::UninitedUpwards&) (in /usr/lib/dyld)
==34368==    by 0x100015440: ImageLoader::recursiveInitialization(ImageLoader::LinkContext const&, unsigned int, char const*, ImageLoader::InitializerTimingList&, ImageLoader::UninitedUpwards&) (in /usr/lib/dyld)
==34368==    by 0x100014523: ImageLoader::processInitializers(ImageLoader::LinkContext const&, unsigned int, ImageLoader::InitializerTimingList&, ImageLoader::UninitedUpwards&) (in /usr/lib/dyld)
==34368==    by 0x1000145B8: ImageLoader::runInitializers(ImageLoader::LinkContext const&, ImageLoader::InitializerTimingList&) (in /usr/lib/dyld)
==34368==  Address 0x10488cb3c is on thread 1's stack
==34368==  in frame #2, created by task_set_special_port (???:)
==34368==  Uninitialised value was created by a stack allocation
==34368==    at 0x10072E0A6: _os_trace_create_debug_control_port (in /usr/lib/system/libsystem_trace.dylib)
==34368== 
==34368== Invalid read of size 8
==34368==    at 0x100001B2E: MAIN__ (buggy_code_3.f90:41)
==34368==    by 0x100001B90: main (buggy_code_3.f90:47)
==34368==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==34368== 

Program received signal SIGSEGV: Segmentation fault - invalid memory reference.

Backtrace for this error:
#0  0x1000a8579
#1  0x1000a7945
--34368-- VALGRIND INTERNAL ERROR: Valgrind received a signal 11 (SIGSEGV) - exiting
--34368-- si_code=1;  Faulting address: 0x700006E6F000;  sp: 0x700006aadc68

valgrind: the 'impossible' happened:
   Killed by fatal signal

host stacktrace:
==34368==    at 0x258059B1C: ???
==34368==    by 0x2580BCD03: ???
==34368==    by 0x2580BB561: ???
==34368==    by 0x2580B96AD: ???
==34368==    by 0x2580CA8D3: ???

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable (lwpid 771)
==34368==    at 0x1005A0D42: __pthread_kill (in /usr/lib/system/libsystem_kernel.dylib)
==34368==    by 0x1006F9456: pthread_kill (in /usr/lib/system/libsystem_pthread.dylib)
==34368==    by 0x10045F496: raise (in /usr/lib/system/libsystem_c.dylib)
==34368==    by 0x25805BBB1: ???
==34368==    by 0x100001B90: main (buggy_code_3.f90:47)


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.

